"use strict";(self.webpackChunkangular_18_test=self.webpackChunkangular_18_test||[]).push([[6337],{66337:(K,y,e)=>{e.r(y),e.d(y,{default:()=>W});var E=e(10467),s=e(8189),M=e(23098),P=e(89563),d=(e(47280),e(39693)),p=e(56492),O=e(45272),_=e(85211),m=(e(3248),e(35150),e(40707),e(17221)),v=e(76576),D=e(28067),u=e(58701),h=e(95478),S=e(93410),c=e(17049),C=e(85551),A=e(1151),L=e(33036),n=e(22329),a=e(84986),R=e(55417),g=e(65824),j=e(46602),f=e(88521);const T=["atom","xml"],U={base:a.A,key:"type",typeMap:{"simple-line":R.A},errorContext:"symbol"},B={base:a.A,key:"type",typeMap:{"picture-marker":g.A,"simple-marker":j.A},errorContext:"symbol"},I={base:a.A,key:"type",typeMap:{"simple-fill":f.A},errorContext:"symbol"};let o=class extends((0,S.dM)((0,A.J)((0,c.q)((0,C.A)((0,L.j)((0,d.P)(h.A))))))){constructor(...t){super(...t),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(t,r){return"string"==typeof t?{url:t,...r}:t}readFeatureCollections(t,r){return r.featureCollection.layers.forEach(l=>{const i=l.layerDefinition.drawingInfo.renderer.symbol;i&&"esriSFS"===i.type&&i.outline?.style.includes("esriSFS")&&(i.outline.style="esriSLSSolid")}),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const t=this._get("title");return t&&"defaults"!==this.originOf("title")?t:this.url?(0,O.e7)(this.url,T)||"GeoRSS":t}set title(t){this._set("title",t)}load(t){const r=null!=t?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},t).catch(p.QP).then(()=>this._fetchService(r)).then(l=>{this.read(l,{origin:"service"})})),Promise.resolve(this)}hasDataChanged(){var t=this;return(0,E.A)(function*(){const r=yield t._fetchService();return t.read(r,{origin:"service",ignoreDefaults:!0}),!0})()}_fetchService(t){var r=this;return(0,E.A)(function*(){const l=r.spatialReference,{data:i}=yield(0,P.A)(M.A.geoRSSServiceUrl,{query:{url:r.url,refresh:!!r.loaded||void 0,outSR:(0,u.oT)(l)?void 0:l.wkid??JSON.stringify(l)},signal:t});return i})()}_hasGeometry(t){return this.featureCollections?.some(r=>r.featureSet?.geometryType===t&&r.featureSet.features?.length>0)??!1}};(0,s._)([(0,_.MZ)()],o.prototype,"description",void 0),(0,s._)([(0,_.MZ)()],o.prototype,"featureCollections",void 0),(0,s._)([(0,m.w)("service","featureCollections",["featureCollection.layers"])],o.prototype,"readFeatureCollections",null),(0,s._)([(0,_.MZ)({type:D.A,json:{name:"lookAtExtent"}})],o.prototype,"fullExtent",void 0),(0,s._)([(0,_.MZ)(n.id)],o.prototype,"id",void 0),(0,s._)([(0,_.MZ)(n.fV)],o.prototype,"legendEnabled",void 0),(0,s._)([(0,_.MZ)({types:U,json:{write:!0}})],o.prototype,"lineSymbol",void 0),(0,s._)([(0,_.MZ)({type:["show","hide"]})],o.prototype,"listMode",void 0),(0,s._)([(0,_.MZ)({types:B,json:{write:!0}})],o.prototype,"pointSymbol",void 0),(0,s._)([(0,_.MZ)({types:I,json:{write:!0}})],o.prototype,"polygonSymbol",void 0),(0,s._)([(0,_.MZ)({type:["GeoRSS"]})],o.prototype,"operationalLayerType",void 0),(0,s._)([(0,_.MZ)(n.OZ)],o.prototype,"url",void 0),(0,s._)([(0,_.MZ)({json:{origins:{service:{read:{source:"name",reader:t=>t||void 0}}}}})],o.prototype,"title",null),(0,s._)([(0,_.MZ)({readOnly:!0,json:{read:!1},value:"geo-rss"})],o.prototype,"type",void 0),o=(0,s._)([(0,v.$)("esri.layers.GeoRSSLayer")],o);const W=o}}]);